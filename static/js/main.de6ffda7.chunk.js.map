{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","columns","setColumns","data","setData","className","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","processData","sheet_to_csv","header","readAsBinaryString","label","filename","exportFile","pagination","highlightOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAwFeA,MAlFf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAgEb,OACE,sBAAKC,UAAU,YAAf,UACE,iDACA,uBAAOC,KAAK,OAAOC,OAAO,kBAAkBC,SApBvB,SAACC,GACxB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAEf,IAAMC,EAAOD,EAAIL,OAAOO,OAClBC,EAAKC,OAAUH,EAAM,CAAEX,KAAM,WAE7Be,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,IAnDL,SAACI,GAOnB,IANA,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAAGC,MACjC,uCAGIE,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAgBK,OAAQD,IAAK,CAC/C,IAAME,EAAMN,EAAgBI,GAAGH,MAC7B,uCAEF,GAAIC,GAAWI,EAAID,SAAWH,EAAQG,OAAQ,CAE5C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACA,MAATI,EAAE,KAAYA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACxB,MAApBI,EAAEA,EAAEJ,OAAS,KAAYI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAEzDH,EAAQM,KACVD,EAAIL,EAAQM,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAACC,GAAD,OAAOA,KAAGT,OAAS,GAC/CF,EAAKY,KAAKR,IAMhB,IAAMhC,EAAU2B,EAAQc,KAAI,SAACC,GAAD,MAAQ,CAClCC,KAAMD,EACNE,SAAUF,MAGZvC,EAAQyB,GACR3B,EAAWD,GAgBT6C,CADa1B,QAAW2B,aAAaxB,EAAI,CAAEyB,OAAQ,MAGrDnC,EAAOoC,mBAAmBvC,MAOxB,qBAAKL,UAAU,WAAf,SACE,cAAC,IAAD,CACE6C,MAAM,WACNC,SAAS,OACTC,WAAY,iBAAM,sBAGtB,qBAAK/C,UAAU,YAAf,SACE,cAAC,IAAD,CAAWgD,YAAU,EAACC,kBAAgB,EAACrD,QAASA,EAASE,KAAMA,UCtExDoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de6ffda7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport DownloadLink from \"react-download-link\";\nimport DataTable from \"react-data-table-component\";\nimport \"./App.css\";\n\nfunction App() {\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  // process CSV data\n  const processData = (dataString) => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n    );\n\n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n      );\n      if (headers && row.length === headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter((x) => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n    // prepare columns list from headers\n    const columns = headers.map((c) => ({\n      name: c,\n      selector: c,\n    }));\n\n    setData(list);\n    setColumns(columns);\n  };\n\n  // handle file upload\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div className=\"container\">\n      <h3>CSV UPLOADER - </h3>\n      <input type=\"file\" accept=\".csv,.xlsx,.xls\" onChange={handleFileUpload} />\n      <div className=\"Download\">\n        <DownloadLink\n          label=\"Download\"\n          filename=\"file\"\n          exportFile={() => \"My cached data\"}\n        />\n      </div>\n      <div className=\"Datatable\">\n        <DataTable pagination highlightOnHover columns={columns} data={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}